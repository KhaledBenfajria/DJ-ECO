To create a Python distribution package for your Django project using setuptools, you can follow these general steps:

    Create a setup.py file in the root of your project that specifies the metadata and dependencies for your distribution package.
    Run the command python setup.py sdist to create a source distribution package.
    Run the command python setup.py bdist_wheel to create a binary distribution package.

After you have created the distribution package, it can be installed or distributed to other systems using standard Python packaging tools like pip.

In general, using setuptools to create a Python distribution package is considered the best practice for packaging and distributing Django projects. It provides a standardized and widely used approach that is compatible with the larger Python ecosystem.

Here's an example setup.py file that you could use as a starting point for packaging your Django project using setuptools:
from setuptools import setup, find_packages

setup(
    name='your_project_name',
    version='1.0.0',
    description='A brief description of your project',
    author='Your Name',
    author_email='your_email@example.com',
    url='https://github.com/yourusername/yourproject',
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        'Django>=3.0,<4.0',
        # Add any other dependencies here
    ],
)

# Download and unzip the Scanner for Linux
export SONAR_SCANNER_VERSION=4.7.0.2747
export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
sudo curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
sudo unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
export PATH=$SONAR_SCANNER_HOME/bin:$PATH
export SONAR_SCANNER_OPTS="-server"

cat /etc/docker/daemon.json
{
  "insecure-registries": ["http://52.249.250.21:8070"]
}

